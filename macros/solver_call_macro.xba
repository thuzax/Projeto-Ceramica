REM  *****  BASIC  *****

Global SOLVER_PATH

Function MakePythonManagerExecutable()

	If (OSIsUnix()) Then
		command = "chmod +x " & SOLVER_PATH & "exec_kiln_solver.py "
		ExecCommand(command)
	ElseIf (OSIsWindows()) Then
		'TODO
	EndIf

End Function

Function PathToSolverPathFile() As String
	homeDir = GetHomeDir()
	fileNameStoreSolverPath = ".caminho_do_solver_macro_libre_office.txt"
	PathToSolverPathFile = AddDirSepartorAtPathEnd(homeDir & fileNameStoreSolverPath)
End Function


Function IsAnPtBrAccentedLetterInASCII(hexFirstPart As String, hexSecondPart As String) As Boolean
	upperFirstPart = UCase(hexFirstPart)
	If (upperFirstPart <> "C3") Then
		IsAnPtBrAccentedLetter = False
		Exit Function
	EndIf
	
	upperSecondPart = UCase(hexSecondPart)
	
	accentedLetter = False
	
	arr = "80,81,82,83,89,8A,8D,93,94,95,9A,9C,87,A0,A1,A2,A3,A9,AA,AD,B3,B4,B5,BA,BC,A7,"
	If (Len(upperSecondPart) = 2 And Instr(arr, upperSecondPart & ",") <> 0) Then
		accentedLetter = True
	EndIf
	IsAnPtBrAccentedLetterInASCII = accentedLetter
End Function

Function IsAnPtBrAccentedLetter(charact As String) As Boolean
	arr = "À,Á,Â,Ã,É,Ê,Í,Ó,Ô,Õ,Ú,Ü,Ç,à,á,â,ã,é,ê,í,ó,ô,õ,ú,ü,ç,"
	If (Len(upperSecondPart) = 1 And Instr(arr, upperSecondPart & ",") <> 0) Then
		accentedLetter = True
	EndIf
	IsAnPtBrAccentedLetter = accentedLetter
End Function



Function PathHasSpaceOrAccentedLetter(path As String) As Boolean
	i = 1
	hasSpaceOrAccLetter = False
	While i <= Len(path)
		charact = Mid(path, i, 1)
		If (charact = "%") Then
			nextTwoCharact = Ucase(Mid(path, i+1, 2))
			If (nextTwoCharact = "20") Then
				hasSpaceOrAccLetter = True
				i = Len(path)
			Else
				hexSecondPart = UCase(Mid(path, i+4, 2))
				If (IsAnPtBrAccentedLetterInASCII(nextTwoCharact, hexSecondPart)) Then
					hasSpaceOrAccLetter = True
					i = Len(path)
				EndIf
			EndIf
		ElseIf (IsAnPtBrAccentedLetter(charact) Or charact = " ") Then
			hasSpaceOrAccLetter = True
			i = Len(Path)
		EndIf
		i = i + 1
	WEnd
	PathHasSpaceOrAccentedLetter = hasSpaceOrAccLetter
End Function


Function ConvertASCIIToAccentedLetter(hexFirstPart As String, hexSecondPart As String) As String
	upperFirstPart = UCase(hexFirstPart)
	If (upperFirstPart <> "C3") Then
		ConvertASCIIToAccentedLetter = ""
		Exit Function
	EndIf

	upperSecondPart = UCase(hexSecondPart)

	charact = hexSecondPart
	Select Case upperSecondPart
		Case "80" 
			charact = "À"
		Case "81" 
			charact = "Á"
		Case "82" 
			charact = "Â"
		Case "83" 
			charact = "Ã"
		Case "89" 
			charact = "É"
		Case "8A" 
			charact = "Ê"
		Case "8D" 
			charact = "Í"
		Case "93" 
			charact = "Ó"
		Case "94" 
			charact = "Ô"
		Case "95" 
			charact = "Õ"
		Case "9A" 
			charact = "Ú"
		Case "9C" 
			charact = "Ü"
		Case "87" 
			charact = "Ç"
		'-------------------
		Case "A0" 
			charact = "à"
		Case "A1" 
			charact = "á"
		Case "A2" 
			charact = "â"
		Case "A3" 
			charact = "ã"
		Case "A9" 
			charact = "é"
		Case "AA" 
			charact = "ê"
		Case "AD" 
			charact = "í"
		Case "B3" 
			charact = "ó"
		Case "B4" 
			charact = "ô"
		Case "B5" 
			charact = "õ"
		Case "BA" 
			charact = "ú"
		Case "BC" 
			charact = "ü"
		Case "A7" 
			charact = "ç"	
	End Select
	ConvertASCIIToAccentedLetter = charact
	
End Function


Function ConvertASCIIPathAccentedLetters(path As String) As String
	i = 1
	newPath = ""
	While i <= Len(path)
		charact = Mid(path, i, 1)
		newCharact = charact
		numberToAddToI = 1
		If (charact = "%") Then
			nextTwoCharact = Ucase(Mid(path, i+1, 2))
			If nextTwoCharact = "20" Then
				newCharact = "\ "
				numberToAddToI = 3
			ElseIf (nextTwoCharact = "C3") Then
				hexSecondPart = UCase(Mid(path, i+4, 2))
				newCharact = ConvertASCIIToAccentedLetter(nextTwoCharact, hexSecondPart)
				numberToAddToI = 6
			Endif
		EndIf
		newPath = newPath & newCharact
		i = i + numberToAddToI
	WEnd
	ConvertASCIIPathAccentedLetters = newPath
End Function


Function OSName As String
    ''' Return platform name as "MAC", "UNIX", "WIN" '''
    With GlobalScope.Basiclibraries
        If Not .IsLibraryLoaded("Tools") Then .LoadLibrary("Tools")
    End With
    Dim keyNode As Object ' com.sun.star.configuration.ConfigurationAccess '
    keyNode = Tools.Misc.GetRegistryKeyContent("org.openoffice.Office.Common/Help")
    OSName = keyNode.GetByName("System")
    ' inferred from "Tools.UCB.ShowHelperDialog" '
End Function 

Function UnixHomeDir()	
	UnixHomeDir = "/home/" & environ("USER") & "/"
End Function

Function WindowsHomeDir()
	WindowsHomeDir = "C:\Users\" & environ("USERNAME") & "\Documentos\"
End Function

Function GetHomeDir() As String
	homeDir = ""
	If (OSIsUnix()) Then
		homeDir = AddURLPreffixOnPath(UnixHomeDir())
	ElseIf (OSIsWindows()) Then
		homeDir = AddURLPreffixOnPath(WindowsHomeDir())
	EndIf
	GetHomeDir = homeDir
End Function

Function OSIsUnix() As Boolean
	osN = OSName()
	isUnix = False
	If (osN = "UNIX") Then
		isUnix = True
	EndIf
	OSIsUnix = isUnix
End Function

Function OSIsWindows() As Boolean
	osN = OSName()
	isWindows = False
	If (osN = "Windows") Then
		isWindows = True
	EndIf
	OSIsWindows = isWindows
End Function

Function AddURLPreffixOnPath(strPath As String) As String
	preffix = ""
	If (OSIsUnix() And Left(strPath, 7) <> "file://") Then
		preffix = "file://"
	ElseIf (OSIsWindows) Then
		preffix = ""
	EndIf
	AddURLPreffixOnPath = preffix & strPath
End Function

Function RemoveURLPreffixOnPath(strPath As String) As String
	newPath = strPath
	If (OSIsUnix() And Left(strPath, 7) = "file://") Then
		newPath = Mid(strPath, 8, Len(strPath))
	ElseIf (OSIsWindows) Then
		newPath = strPath
	EndIf
	RemoveURLPreffixOnPath = newPath
End Function

Function AddDirSepartorAtPathEnd(strPath As String) As String
	newPath = strPath
	If (OSIsUnix() And Mid(strPath, Len(strPath), 1) <> "/") Then
		newPath = strPath & "/"
	ElseIf (OSIsWindows And Mid(strPath, Len(strPath), 1) <> "\") Then
		newPath = strPath & "\"
	EndIf
	AddDirSepartorAtPathEnd = newPath
End Function

Function ExistsFile(path As String) As Boolean
	pathURL = AddURLPreffixOnPath(path)
	ExistsFile = FileExists(pathURL)
End Function

Function SelectFolder(strTitle As String, strInitPath As String) As String
	REM Opens the FolderPicker dialog and returns the URL of the selected Folder.
	Dim oFolderPicker	: oFolderPicker = CreateUnoService( "com.sun.star.ui.dialogs.FolderPicker" )
	oFolderPicker.setTitle(strTitle)
	oFolderPicker.setDisplayDirectory( strInitPath )
	If oFolderPicker.execute() = 1 Then 
		SelectFolder = oFolderPicker.getDirectory()
	End If
End Function

Function GetCurrentFilePath() As String
    sUrl = ThisComponent.URL
    GetCurrentFilePath = sURL
End Function

Function HasSolverDirectoryVerificationFile(path As String) As Boolean
	verificationFileName = "solver_directory_verification_file.txt"
	
	verificationFilePath = path & verificationFileName
	verificationFilePath = AddURLPreffixOnPath(verificationFilePath)
	
	HasSolverDirectoryVerificationFile = ExistsFile(verificationFilePath)
End Function

Function DefineSolverPath()
	homeDir = GetHomeDir()

	newSolverPath = SelectFolder("Indique a pasta do solver", homeDir)
	If (newSolverPath = "") Then
		MsgBox("É necessário indicar a pasta do solver.", MB_OK)
		Stop
	EndIf

	newSolverPath = RemoveURLPreffixOnPath(newSolverPath)
	newSolverPath = AddDirSepartorAtPathEnd(newSolverPath)
	newSolverPath = ConvertASCIIPathAccentedLetters(newSolverPath)
	
	If (HasSolverDirectoryVerificationFile(newSolverPath)) Then
		SOLVER_PATH = newSolverPath
		WriteTextFile(PathToSolverPathFile(), SOLVER_PATH)
		MsgBox("Pasta do solver definida para: " & SOLVER_PATH, MB_OK)

	Else
		errorText = "Esta pasta não é a pasta do solver, pois não contém o arquivo de verificação do solver."
		If (PathHasSpaceOrAccentedLetter(newSolverPath)) Then
			errorText = errorText & Chr(10)
			errorText = errorText & "Obs: Certifique-se que nenhuma pasta acima da pasta do solver tenha "
			errorText = errorText & "espaços, acentos ou o caractere % (exemplo: não salve a pasta do solver na "
			errorText = errorText & """Área de Trabalho"")."
		EndIf
		MsgBox(errorText, MB_OK)
		Stop
	End If
	
End Function

Function ReadSolverPathFile()

	path = AddURLPreffixOnPath(PathToSolverPathFile())

	SOLVER_PATH = ""
	If (Not ExistsFile(path)) Then
		Exit Function
	EndIf

	Dim Prop(0) As New com.sun.star.beans.PropertyValue

	Prop(0).Name = "Hidden"
	Prop(0).Value = true

	Dim oDoc As Object
	Dim oCursor As Object
	
	oDoc = StarDesktop.loadComponentFromURL(path, "_blank", 0, Prop())
	oCursor = oDoc.CurrentController.viewCursor
	oCursor.gotoStart(false)
	oCursor.gotoEndOfLine(true)

	SOLVER_PATH = oCursor.string

	oDoc.close(true)

End Function

Function WriteTextFile(pathToFile As String, textToWrite As String)

	path = AddURLPreffixOnPath(pathToFile)

	Dim objSimpleFileAccess As Object

	objSimpleFileAccess	 = createUNOService ("com.sun.star.ucb.SimpleFileAccess") 
	
	' If file exists overwrite it by deleting first
    If (ExistsFile(path)) Then
      objSimpleFileAccess.kill(path)
    End If

	Dim outStream as Object	
	outStream = objSimpleFileAccess.openFileWrite(path) 

	Dim outText as Object
	outText = createUNOService ("com.sun.star.io.TextOutputStream") 
	outText.setOutputStream(outStream) 

	outText.WriteString(textToWrite) 
	outText.closeOutput() 

End Function

Function SaveFileAsCSV()

    document = ThisComponent

    ' Use the global string tools library to generate a path to save each CSV
    'GlobalScope.BasicLibraries.loadLibrary("Tools")

    ' Work out number of sheets for looping over them later.
    sheets = document.Sheets
    numSheets = sheets.Count - 1

    ' Set up a propval object to store the filter properties
    Dim Propval(1) as New com.sun.star.beans.PropertyValue
    Propval(0).Name = "FilterName"
    Propval(0).Value = "Text - txt - csv (StarCalc)"
    Propval(1).Name = "FilterOptions"
    Propval(1).Value ="59,34,0,1,1"   'ASCII  59 = ;  34 = "
	
	problemInputsDir = SOLVER_PATH & "inputs/"
	
	If (Not ExistsFile(problemInputsDir)) Then
		command = "mkdir " & problemInputsDir
		ExecCommand(command)
	EndIf
	
	problemInputsDir = SOLVER_PATH & "inputs/"	
	
	If (Not ExistsFile(problemInputDir)) Then
		command = "mkdir " & problemInputsDir
		ExecCommand(command)
	EndIf
	
	
    For i = 0 to numSheets
        document.getCurrentController.setActiveSheet(sheets(i))
		fileName = ""
		If (i = 0) Then
	        fileName = "Pecas.csv"
	    ElseIf (i = 1) Then
	    	fileName = "Forno.csv"
	    EndIf
	    
	    fileURL = AddURLPreffixOnPath(problemInputsDir & fileName)
        document.StoreToURL(fileURL, Propval())
        
    Next i


End Function

Function VerifyNumberOfSheets()

	document = ThisComponent
	sheets = document.Sheets
	
	If (sheets.Count <> 2) Then
		errorText = "Erro! O número de planilhas deve ser exatamente 2." & Chr(10)
		errorText = errorText & "A primeira deve ser para descrever as peças e suas quantidades e a segunda para o forno e os suportes"
		MsgBox(errorText, MB_OK)
		Stop
	EndIf

End Function


Function GetSolutionOutPutFileLocation() As String
	dirURL = SelectFolder("Selecione a pasta onde deverá ser armazenado o resultado.", GetHomeDir())
	If (dirURL = "") Then
		MsgBox("É necessário indicar a pasta do onde a solução deverá ser armazenada.", MB_OK)
		Stop
	EndIf
	GetSolutionOutPutFileLocation = RemoveURLPreffixOnPath(ConvertASCIIPathAccentedLetters(dirURL))
End Function

Function ExecLinuxCommand(command As String)

	shellCommand = "-c '" & command & "'"
	result = Shell("bash", 1, shellCommand, True)

End Function

Function ExecCommand(command As String)
	If (OSIsUnix()) Then
		ExecLinuxCommand(command)
	ElseIf(OsIsWindows()) Then
		'TODO
	EndIf

End Function

Function RunSolver()
	MakePythonManagerExecutable()
	
	solverOutputPath = GetSolutionOutPutFileLocation()
	command = ""
	If (OSIsUnix()) Then
		command = SOLVER_PATH & "exec_kiln_solver.py " & solverOutputPath	
	ElseIf (OSIsWindows()) Then
		'TODO
	EndIf
	MsgBox(command)
	
	ExecCommand(command)

End Function

Sub Solver
	MsgBox("AA", MB_OK)
	VerifyNumberOfSheets()

	sheetPath = GetCurrentFilePath()
	If (sheetPath = "") Then
		MsgBox("Salve o arquivo pela primeira vez para poder executar o solver.", MB_OK)
		Stop
	End If
'	sheetPath = RemoveURLPreffixOnPath(sheetPath)
'	sheetPath = ConvertASCIIPathAccentedLetters(sheetPath)
'	MsgBox(sheetPath, MB_OK)

	ReadSolverPathFile()
	If (SOLVER_PATH = "") Then
		MsgBox("Solver não encontrado. Selecione a pasta onde se encontra o solver.", MB_OK)
		DefineSolverPath()
	EndIf
'	MsgBox(SOLVER_PATH, MB_OK)
	
	SaveFileAsCSV()
	RunSolver()
	
End Sub

Sub RedefinirCaminhoDoSolver
	DefineSolverPath()
End Sub

Sub Macro1

End Sub