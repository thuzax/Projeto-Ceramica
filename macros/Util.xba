REM  *****  BASIC  *****


Function SeeProperties(obj As Object)
	oMRI = CreateUnoService("mytools.Mri")
	oMRI.inspect(obj)
	MsgBox("Close me")
End Function


Function HasTwo2DMeasures(itemType As String) As Boolean
	iType = LCase(itemType)
	HasTwo2DMeasures = False
	If (iType = "retÃ¢ngulo" Or iType = "retangulo") Then
		HasTwo2DMeasures = True
	EndIf
End Function


Function GetButtonLocationByName(buttonName As String) As String
	Dim Doc As Object
	Doc = ThisComponent

	Dim Sheet As Object		
	Sheet = Doc.CurrentController.ActiveSheet
	
	Dim pageCount As Integer		
	pageCount = Sheet.DrawPage.count

	Dim FoundIt As Boolean
	FoundIt = False
	
	Dim bSearcher As Object
	
	Do While pageCount >= 1
		bSearcher = Sheet.DrawPage(pageCount - 1)
		If InStr(bSearcher.ShapeType, "ControlShape") > 0 Then
			If bSearcher.Control.Name = buttonName Then
				FoundIt = True
				Exit Do
			EndIf
		EndIf
		pageCount = pageCount - 1
	Loop
	If FoundIt Then
		GetbuttonLocationByName = bSearcher.Anchor.AbsoluteName
	Endif
	
End Function


'Returns a String with sheet, column and row of a cell of a anchored button with unique name = buttonName
'parameters format example -> buttonName:  "myButtonAnchored"
'return format example -> "$sheet1.$A$4";
Function GetButtonLocation(buttonObj As Object) As String
	buttonName = buttonObj.Source.Model.Name
	GetButtonLocation = GetbuttonLocationByName(buttonName)
End Function

'Get the object that represents the cell with absolute name = cellAbsoluteName
'parameters format example -> cellAbsoluteName:  "$sheet1.$A$2"
'return -> sheet object;
Function GetSheetObjectOfCell(cellAbsoluteName As String) As Object

	addressParts = Split(cellAbsoluteName, ".") 	

	sheetName = addressParts(0)
	sheetName = Mid(sheetName, 2, Len(sheetName)-1)
	sheetObj = ThisComponent.Sheets.GetByName(sheetName)

	GetSheetObjectOfCell = sheetObj

End Function

Function GetCurrentSheet() As Object

	GetCurrentSheet = ThisComponent.GetCurrentController.ActiveSheet
	
End Function

'Get the object that represents the cell with absolute address = cellName
'If the address is in the current sheet only the position is needed
'parameters format example -> cellAbsoluteName:  "$sheet1.$A$2" (can be "$A$2", if the cell is on the current sheet)
'return -> cell object;
Function GetCellObjectByName(cellName As String) As Object

	addressParts = Split(cellName, ".")
	
	Dim cellAddress As String
	Dim sheetObj As Object
	
	If UBound(addressParts) = 1 Then
		cellAddress = addressParts(1)
		sheetObj = GetSheetObjectOfCell(cellname)
	Else
		cellAddress = cellAbsoluteName
		sheetObj = GetCurrentSheet()
	EndIf
	cellObj = sheetObj.GetCellRangeByName(cellName)
	GetCellObjectByName = cellObj
	
End Function


'Get the object that represents the cell with row and column
'parameters format example -> row: 0, column: 0
'return -> cell object;
Function GetCellObjectByIndex(row As Integer, column As Integer) As Object

	sheetObj = GetCurrentSheet()
	GetCellObjectByIndex = sheetObj.GetCellByPosition(column, row)
	
End Function


'Returns the column index of a cell with absolute name = cellAbsolutename.
'parameters format example -> cellAbsoluteName:  "$sheet1.$A$2" (can be "$A$2", if the cell is on the current sheet)
'return format example -> 3;
Function GetCellColumnIndexByAbsoluteName(cellAbsoluteName As String) As Integer

	cellObj = GetCellObjectByName(cellAbsoluteName)
	GetCellColumnIndexByAbsoluteName = cellObj.getCellAddress().Column
	
End Function

'Same as GetCellColumnIndexByAbsoluteName, but the parameter is a Cell Object
Function GetCellColumnIndex(cellObj As Object) As Integer
	GetCellColumnIndex	 = cellObj.getCellAddress().Column	
End Function



'Returns the row index of a cell with absolute name = cellAbsolutename.
'parameters format example -> cellAbsoluteName:  "$sheet1.$A$2" (can be "$A$2", if the cell is on the current sheet)
'return format example -> 3;
Function GetCellRowIndexByAbsoluteName(cellAbsoluteName As String) As Integer

	cellObj = GetCellObjectByName(cellAbsoluteName)
	GetCellRowIndexByAbsoluteName = cellObj.getCellAddress().Row
	
End Function

'Same as GetCellRowIndexByAbsoluteName, but the parameter is a Cell Object
Function GetCellRowIndex(cellObj As Object) As Integer
	GetCellRowIndex = cellObj.getCellAddress().Row
End Function


'Returns the cell bellow at the first relative column of a merged. Example: if input cell is a merge B3:D5 it returns the cell B6
'parameters -> cell obj for the first cell object of merged cells
'return -> cell object one row bellow;
Function GetCellNextRowSameColumn(cellObj As Object) As Object
	
	Dim row As Integer
	If(Not cellObj.IsMerged) Then
		row = GetCellRowIndex(cellObj)
	Else
		sheetObj = GetCurrentSheet()
		
		cursorObj = sheetObj.CreateCursorByRange(cellObj)
		cursorObj.CollapseToMergedArea()
	
		splittedAddr = Split(cursorObj.AbsoluteName, ":")
		firstPart = Split(splittedAddr(0), ".")
		lastPart = splittedAddr(UBound(splittedAddr))
		
		row = GetCellRowIndexByAbsoluteName(lastPart)
	EndIf

	column = GetCellColumnIndex(cellObj)	
	nextRow = row + 1		
	cellObj = GetCellObjectByIndex(nextRow, column)
	
	GetCellNextRowSameColumn = cellObj

End Function

'Same as GetCellNextRowSameColumn, but gets the previous row
Function GetCellPreviousRowSameColumn(cellObj As Object) As Object
	row = GetCellRowIndex(cellObj)
	column = GetCellColumnIndex(cellObj)
		
	If (row = 0) Then
		MsgBox("Erro! Tentando acessar linha -1")
		Stop
	EndIf
	
	nextRow = row - 1
	cellObj = GetCellObjectByIndex(nextRow, column)
	
	GetCellPreviousRowSameColumn = cellObj

End Function


'Returns the cell on the right at the first relative row of a merged. Example: if input cell is a merge B3:D5 it returns the cell E3
'parameters -> cell obj for the first cell object of merged cells
'return -> cell object one row bellow;
Function GetCellSameRowNextColumn(cellObj As Object) As Object

	Dim column As Integer
	If(Not cellObj.IsMerged) Then
		column = GetCellColumnIndex(cellObj)
	Else
		sheetObj = GetCurrentSheet()
		
		cursorObj = sheetObj.CreateCursorByRange(cellObj)
		cursorObj.CollapseToMergedArea()
	
		splittedAddr = Split(cursorObj.AbsoluteName, ":")
		firstPart = Split(splittedAddr(0), ".")
		lastPart = splittedAddr(UBound(splittedAddr))
		
		column = GetCellColumnIndexByAbsoluteName(lastPart)
	EndIf

	row = GetCellRowIndex(cellObj)	
	nextColumn = column + 1		
	cellObj = GetCellObjectByIndex(row, nextColumn)
	
	GetCellSameRowNextColumn = cellObj

End Function

'Same as GetCellSameRowNextColumn, but gets the previous column
Function GetCellSameRowPreviousColumn(cellObj As Object) As Object

	column = GetCellColumnIndex(cellObj)
	row = GetCellRowIndex(cellObj)
	
	If column = 0 Then
		MsgBox("Erro! Tentando acessar coluna -1")
		Stop
	EndIf

	prevColumn = column - 1		
	cellObj = GetCellObjectByIndex(row, prevColumn)
	
	GetCellSameRowPreviousColumn = cellObj

End Function


'Returns the row index of a cell with absolute name = cellAbsolutename.
'parameters -> button object"
'return format example -> "$sheet1.$A$3";
Function GetCellBellowButton(button As Object) As Object
	buttonCellAbsName = GetButtonLocation(button)

	sheetObj = GetSheetObjectOfCell(buttonCellAbsName)	
	
	row = GetCellRowIndexByAbsoluteName(buttonCellAbsName)
	column = GetCellColumnIndexByAbsoluteName(buttonCellAbsName)
	
	cellObj = GetCellObjectByIndex(row, column)
	
	cellBellow = GetCellNextRowSameColumn(cellObj)

	GetCellBellowButton = cellBellow

End Function


Function IsInNamedRange(cellObj As Object, namedRange As String) As Boolean

	range = ThisComponent.NamedRanges.getByName(namedRange)
	rangeAddr = range.Content
	
	splittedAddr = Split(rangeAddr, ".")
	cellsStr = splittedAddr(1)
	splittedCellsStr = Split(cellsStr, ":")
	
	firstCell = splittedCellsStr(0)
	lastPos = UBound(splittedCellsStr)
	lastCell = splittedCellsStr(lastPos)
	
	firstCellObj = GetCellObjectByName(firstCell)
	lastCellObj = GetCellObjectByName(lastCell)
	
	firstColumn = GetCellColumnIndex(firstCellObj)
	firstRow = GetCellRowIndex(firstCellObj)
	
	lastColumn = GetCellColumnIndex(lastCellObj)
	lastRow = GetCellRowIndex(lastCellObj)
	
	column = GetCellColumnIndex(cellObj)
	row = GetCellRowIndex(cellObj)
	
	If (column < firstColumn and column > lastColumn) Then
		IsInNamedRange = False
	Else
		IsInNamedRange = True
	EndIf

End Function


Function GetRangeCellsAddresses(namedRange As String) As Object

	range = ThisComponent.NamedRanges.getByName(namedRange)
	rangeAddr = range.Content
	
	splittedRangeAddr = Split(rangeAddr, ".")
	lastPos = UBound(splittedRangeAddr)
	cellsAddr = Split(splittedRangeAddr(lastPos), ":")
	
	GetRangeCellsAddresses = cellsAddr

End Function



Function GetFirstCellObjFromNamedRange(namedRange As String) As Object

	cellsAddr = GetRangeCellsAddresses(namedRange)
	cellObj = GetCellObjectByName(cellsAddr(0))
	
	GetFirstCellObjFromNamedRange = cellObj

End Function


Function GetLastCellObjFromNamedRange(namedRange As String) As Object

	cellsAddr = GetRangeCellsAddresses(namedRange)
	lastPos = UBound(cellsAddr)
	cellObj = GetCellObjectByName(cellsAddr(lastPos))
	
	GetLastCellObjFromNamedRange = cellObj

End Function

Function InsertCellAbove(rowStart As Integer, rowEnd As Integer, columnStart As Integer, columnEnd As Integer)

	Dim CellRangeAddress As New com.sun.star.table.CellRangeAddress
	
	cellRangeAddress.Sheet = 0
	cellRangeAddress.StartColumn = columnStart
	cellRangeAddress.StartRow = rowStart
	cellRangeAddress.EndColumn = columnEnd
	cellRangeAddress.EndRow = rowEnd

	
	sheet = GetCurrentSheet()
	sheet.insertCells(cellRangeAddress, com.sun.star.sheet.CellInsertMode.DOWN)

End Function


Sub Main

End Sub